{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","date","title","summary","poster_path","genre_ids","genres_category","poster","genre_text","genres","returnArray","forEach","genre_id","genre","id","push","name","genreIdToText","className","src","alt","map","index","slice","API_KEY","API_LANG","API_GENRE","API_POPULAR","App","useState","isLoading","setIsLoading","movies","setMovies","genresCategory","setGenresCategory","useEffect","fetch","then","res","json","result","results","movie","release_date","overview","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PA4CeA,MA7Bf,YAAkF,IAAjEC,EAAgE,EAAhEA,KAAMC,EAA0D,EAA1DA,MAAOC,EAAmD,EAAnDA,QAASC,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,gBACrDC,EAAM,0CAAsCH,GAC5CI,EAbV,SAAuBH,EAAWI,GAC9B,IAAMC,EAAc,GAQpB,OAPAL,EAAUM,SAAQ,SAAAC,GACdH,EAAOE,SAAQ,SAAAE,GACPA,EAAMC,KAAOF,GACbF,EAAYK,KAAKF,EAAMG,YAI5BN,EAIYO,CAAcZ,EAAWC,GAE5C,OACI,sBAAKY,UAAU,QAAf,UACI,qBAAKC,IAAKZ,EAAQa,IAAKlB,EAAOA,MAAOA,IACrC,sBAAKgB,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BhB,IAC9B,oBAAIgB,UAAU,cAAd,SAA6BjB,IAC7B,oBAAIiB,UAAU,gBAAd,SACKV,EAAWa,KAAI,SAACR,EAAMS,GAAP,OACZ,oBAAgBJ,UAAU,gBAA1B,SAA2CL,GAAlCS,QAEjB,oBAAGJ,UAAU,iBAAb,UAA+Bf,EAAQoB,MAAM,EAAE,KAA/C,gBCvBVC,G,MAAU,oCACVC,EAAW,QAGXC,GADM,yDAAqDF,GAClD,0GAAsGC,IAE/GE,GADa,+DAA2DH,EAA3D,qBAA+EC,GACjF,6DAAyDD,EAAzD,qBAA6EC,IAoD/EG,MAjDf,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAG+BJ,mBAAS,IAHxC,mBAGNK,EAHM,KAGUC,EAHV,KAuBX,OAlBFC,qBAAU,WACRC,MAAMV,GACHW,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCV,GAAa,GACbE,EAAUQ,EAAOC,YAGvBL,MAAMX,GACHY,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCN,EAAkBM,EAAOhC,aAG9B,IAGC,yBAASS,UAAU,YAAnB,SACGY,EACC,qBAAKZ,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGA,qBAAKA,UAAU,SAAf,SACIc,EAAOX,KAAI,SAAAsB,GAAK,OAClB,cAAC,EAAD,CAEI7B,GAAI6B,EAAM7B,GACVb,KAAM0C,EAAMC,aACZ1C,MAAOyC,EAAMzC,MACbC,QAASwC,EAAME,SACfzC,YAAauC,EAAMvC,YACnBC,UAAWsC,EAAMtC,UACjBC,gBAAiB4B,GAPZS,EAAM7B,YC5C7BgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.efddb395.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\n\nfunction genreIdToText(genre_ids, genres) {\n    const returnArray = [];\n    genre_ids.forEach(genre_id => {\n        genres.forEach(genre => {\n            if (genre.id === genre_id) {\n                returnArray.push(genre.name);\n            }\n        })\n    });\n    return returnArray;\n}\nfunction Movie({ date, title, summary, poster_path, genre_ids, genres_category}) {\n    const poster = `https://image.tmdb.org/t/p/w200/${poster_path}`;\n    const genre_text = genreIdToText(genre_ids, genres_category);\n\n    return (\n        <div className=\"movie\">\n            <img src={poster} alt={title} title={title}/>\n            <div className=\"movie__data\">\n                <h3 className=\"movie__title\">{title}</h3>\n                <h5 className=\"movie__date\">{date}</h5>\n                <ul className=\"movie__genres\">\n                    {genre_text.map((genre,index)  =>\n                        <li key={index} className=\"genres__genre\">{genre}</li>\n                )}</ul>\n                <p className=\"movie__summary\">{summary.slice(0,170)}...</p>\n            </div>\n        </div>\n    );\n}\n\nMovie.propTypes = {\n    id: PropTypes.number.isRequired,\n    date: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    summary: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n    genre_ids: PropTypes.arrayOf(PropTypes.number).isRequired\n}\n\nexport default Movie;","import \"./reset.css\"\nimport React, { useState, useEffect} from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\nconst API_KEY = \"efe03a6d3db809fae4ff34eeb880e298\";\nconst API_LANG = \"fr-FR\";\n\nconst API_EX = `https://api.themoviedb.org/3/movie/550?api_key=${API_KEY}`;\nconst API_GENRE = `https://api.themoviedb.org/3/genre/movie/list?api_key=efe03a6d3db809fae4ff34eeb880e298&language=${API_LANG}`;\nconst API_TOP_RATED = `https://api.themoviedb.org/3/movie/top_rated?api_key=${API_KEY}&language=${API_LANG}`;\nconst API_POPULAR = `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=${API_LANG}`\n\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [movies, setMovies] = useState([]);\n  const [genresCategory, setGenresCategory] = useState([]);\n\n  useEffect(() => {\n    fetch(API_POPULAR)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoading(false);\n          setMovies(result.results);\n        }\n      );\n    fetch(API_GENRE)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setGenresCategory(result.genres);\n        }\n      );\n  }, []);\n\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n            <div className=\"movies\">\n              { movies.map(movie => (\n              <Movie\n                  key={movie.id}\n                  id={movie.id}\n                  date={movie.release_date}\n                  title={movie.title}\n                  summary={movie.overview}\n                  poster_path={movie.poster_path}\n                  genre_ids={movie.genre_ids}\n                  genres_category={genresCategory}\n              />\n            ))}\n            </div>\n          )}\n      </section>\n    );\n}\n\nexport default App;\n\n/*\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n    genresCategory:[]\n  };\n\n  getMovies = async () => {\n    const { data: { results } } = await axios.get(API_POPULAR); //this API don't have genre with form text but only id value.\n    const { data: { genres } } = await axios.get(API_GENRE); //So, have to convert to text with this API.\n\n    this.setState({ movies: results, isLoading: false });\n    this.setState({ genresCategory : genres});\n  }\n\n  componentDidMount() {\n    this.getMovies();\n  }\n  render() {\n    const { isLoading, movies, genresCategory} = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n            <div className=\"movies\">\n              { movies.map(movie => (\n              <Movie\n                  key={movie.id}\n                  id={movie.id}\n                  date={movie.release_date}\n                  title={movie.title}\n                  summary={movie.overview}\n                  poster_path={movie.poster_path}\n                  genre_ids={movie.genre_ids}\n                  genres_category={genresCategory}\n              />\n            ))}\n            </div>\n          )}\n      </section>\n    );\n  }\n}\nexport default App;\n\n*/\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}